
metr2800-robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080013c  0080013c  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f6  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  00000bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000279  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bf  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000042  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e5       	ldi	r30, 0x50	; 80
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ac 33       	cpi	r26, 0x3C	; 60
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ac e3       	ldi	r26, 0x3C	; 60
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 34       	cpi	r26, 0x42	; 66
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:

int main(void)
{
    /* Replace with your application code */
    while (1) {
		printf("Hello world\n");
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 76 00 	call	0xec	; 0xec <puts>
		break;
    }
	
	rotateCW(20);
  c2:	84 e1       	ldi	r24, 0x14	; 20
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <rotateCW>
	rotateCCW(30);
  ca:	8e e1       	ldi	r24, 0x1E	; 30
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 71 00 	call	0xe2	; 0xe2 <rotateCCW>
}
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <rotateCW>:


#include "../utils/motor.h"

void rotateCW(uint8_t angle) {
	printf("Hello world again - CW\n");
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 76 00 	call	0xec	; 0xec <puts>
  e0:	08 95       	ret

000000e2 <rotateCCW>:
}

void rotateCCW(uint8_t angle) {
	printf("Hello world again - CCW\n");
  e2:	83 e2       	ldi	r24, 0x23	; 35
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 76 00 	call	0xec	; 0xec <puts>
  ea:	08 95       	ret

000000ec <puts>:
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <__data_end+0x2>
  f8:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <__data_end+0x3>
  fc:	23 81       	ldd	r18, Z+3	; 0x03
  fe:	21 ff       	sbrs	r18, 1
 100:	1b c0       	rjmp	.+54     	; 0x138 <puts+0x4c>
 102:	8c 01       	movw	r16, r24
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	f8 01       	movw	r30, r16
 10a:	81 91       	ld	r24, Z+
 10c:	8f 01       	movw	r16, r30
 10e:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <__data_end+0x2>
 112:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <__data_end+0x3>
 116:	db 01       	movw	r26, r22
 118:	18 96       	adiw	r26, 0x08	; 8
 11a:	ed 91       	ld	r30, X+
 11c:	fc 91       	ld	r31, X
 11e:	19 97       	sbiw	r26, 0x09	; 9
 120:	88 23       	and	r24, r24
 122:	31 f0       	breq	.+12     	; 0x130 <puts+0x44>
 124:	09 95       	icall
 126:	89 2b       	or	r24, r25
 128:	79 f3       	breq	.-34     	; 0x108 <puts+0x1c>
 12a:	df ef       	ldi	r29, 0xFF	; 255
 12c:	cf ef       	ldi	r28, 0xFF	; 255
 12e:	ec cf       	rjmp	.-40     	; 0x108 <puts+0x1c>
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	09 95       	icall
 134:	89 2b       	or	r24, r25
 136:	19 f0       	breq	.+6      	; 0x13e <puts+0x52>
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	02 c0       	rjmp	.+4      	; 0x142 <puts+0x56>
 13e:	8d 2f       	mov	r24, r29
 140:	9c 2f       	mov	r25, r28
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
