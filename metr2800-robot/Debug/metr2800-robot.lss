
metr2800-robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010c1  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c1  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f0  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000023e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000078d  00000000  00000000  00002903  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:


int main(void) {

	
    setupDriveTrain();
  94:	0e 94 65 00 	call	0xca	; 0xca <setupDriveTrain>
	DDRD = (1 << DDRD7);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	8a b9       	out	0x0a, r24	; 10
    while (1) {
		PORTD ^= (1 << PORTD7);
  9c:	8b b1       	in	r24, 0x0b	; 11
  9e:	80 58       	subi	r24, 0x80	; 128
  a0:	8b b9       	out	0x0b, r24	; 11
		rotateCW(512);
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	92 e0       	ldi	r25, 0x02	; 2
  a6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <rotateCW>
		powerDownDriveTrain();
  aa:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <powerDownDriveTrain>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	83 ed       	ldi	r24, 0xD3	; 211
  b2:	90 e3       	ldi	r25, 0x30	; 48
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x20>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x2a>
  be:	00 00       	nop
		_delay_ms(1000);
		rotateCCW(512);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	0e 94 85 01 	call	0x30a	; 0x30a <rotateCCW>
  c8:	e9 cf       	rjmp	.-46     	; 0x9c <main+0x8>

000000ca <setupDriveTrain>:
void onestep(uint8_t motor, uint8_t dir);


void setupDriveTrain() {
	// Set left stepper motor pins as outputs
	L_STEPPER_DDR = (1 << L_STEPPER_PIN_1) | \
  ca:	80 ef       	ldi	r24, 0xF0	; 240
  cc:	87 b9       	out	0x07, r24	; 7
					(1 << L_STEPPER_PIN_2) | \
					(1 << L_STEPPER_PIN_3) | \
					(1 << L_STEPPER_PIN_4);
					  
	// Set right stepper motor pins as outputs
	R_STEPPER_DDR = (1 << R_STEPPER_PIN_1) | \
  ce:	8f e0       	ldi	r24, 0x0F	; 15
  d0:	87 b9       	out	0x07, r24	; 7
  d2:	08 95       	ret

000000d4 <writeStepper>:
					(1 << R_STEPPER_PIN_2) | \
					(1 << R_STEPPER_PIN_3) | \
					(1 << R_STEPPER_PIN_4);
}

void writeStepper(uint8_t motor, uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
	if (motor == L_STEPPER) {
  d8:	81 11       	cpse	r24, r1
  da:	15 c0       	rjmp	.+42     	; 0x106 <writeStepper+0x32>
		L_STEPPER_PORT = (a << L_STEPPER_PIN_1) | \
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	68 9f       	mul	r22, r24
  e0:	b0 01       	movw	r22, r0
  e2:	11 24       	eor	r1, r1
						 (b << L_STEPPER_PIN_2) | \
  e4:	80 e4       	ldi	r24, 0x40	; 64
  e6:	48 9f       	mul	r20, r24
  e8:	a0 01       	movw	r20, r0
  ea:	11 24       	eor	r1, r1
						 (c << L_STEPPER_PIN_3) | \
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	28 9f       	mul	r18, r24
  f0:	90 01       	movw	r18, r0
  f2:	11 24       	eor	r1, r1
						 (d << L_STEPPER_PIN_4);
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	08 9f       	mul	r16, r24
  f8:	80 01       	movw	r16, r0
  fa:	11 24       	eor	r1, r1
					(1 << R_STEPPER_PIN_4);
}

void writeStepper(uint8_t motor, uint8_t a, uint8_t b, uint8_t c, uint8_t d) {
	if (motor == L_STEPPER) {
		L_STEPPER_PORT = (a << L_STEPPER_PIN_1) | \
  fc:	46 2b       	or	r20, r22
  fe:	24 2b       	or	r18, r20
 100:	20 2b       	or	r18, r16
 102:	28 b9       	out	0x08, r18	; 8
 104:	15 c0       	rjmp	.+42     	; 0x130 <writeStepper+0x5c>
						 (b << L_STEPPER_PIN_2) | \
						 (c << L_STEPPER_PIN_3) | \
						 (d << L_STEPPER_PIN_4);
	} else if (motor == R_STEPPER) {
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	99 f4       	brne	.+38     	; 0x130 <writeStepper+0x5c>
		R_STEPPER_PORT = (a << R_STEPPER_PIN_1) | \
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	66 0f       	add	r22, r22
 10e:	77 1f       	adc	r23, r23
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
						 (b << R_STEPPER_PIN_2) | \
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	44 0f       	add	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
						 (c << R_STEPPER_PIN_3) | \
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
		L_STEPPER_PORT = (a << L_STEPPER_PIN_1) | \
						 (b << L_STEPPER_PIN_2) | \
						 (c << L_STEPPER_PIN_3) | \
						 (d << L_STEPPER_PIN_4);
	} else if (motor == R_STEPPER) {
		R_STEPPER_PORT = (a << R_STEPPER_PIN_1) | \
 128:	46 2b       	or	r20, r22
 12a:	24 2b       	or	r18, r20
 12c:	20 2b       	or	r18, r16
 12e:	28 b9       	out	0x08, r18	; 8
						 (b << R_STEPPER_PIN_2) | \
						 (c << R_STEPPER_PIN_3) | \
						 (d << R_STEPPER_PIN_4);
	}
}
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	08 95       	ret

00000136 <onestep>:

void onestep(uint8_t motor, uint8_t dir) {
 136:	0f 93       	push	r16
 138:	cf 93       	push	r28
 13a:	c8 2f       	mov	r28, r24
	if (dir == FORWARD) {
 13c:	61 30       	cpi	r22, 0x01	; 1
 13e:	09 f0       	breq	.+2      	; 0x142 <onestep+0xc>
 140:	5b c0       	rjmp	.+182    	; 0x1f8 <onestep+0xc2>
		writeStepper(motor, 1, 0, 0, 0);
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	9f e1       	ldi	r25, 0x1F	; 31
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <onestep+0x1a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <onestep+0x20>
 156:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 1, 1, 0, 0);
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	9f e1       	ldi	r25, 0x1F	; 31
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <onestep+0x32>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <onestep+0x38>
 16e:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 1, 0, 0);
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	41 e0       	ldi	r20, 0x01	; 1
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9f e1       	ldi	r25, 0x1F	; 31
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <onestep+0x4a>
 184:	00 c0       	rjmp	.+0      	; 0x186 <onestep+0x50>
 186:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 1, 1, 0);
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <onestep+0x62>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <onestep+0x68>
 19e:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 0, 1, 0);
 1a0:	21 e0       	ldi	r18, 0x01	; 1
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9f e1       	ldi	r25, 0x1F	; 31
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <onestep+0x7a>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <onestep+0x80>
 1b6:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 0, 1, 1);
 1b8:	01 e0       	ldi	r16, 0x01	; 1
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	9f e1       	ldi	r25, 0x1F	; 31
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <onestep+0x94>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <onestep+0x9a>
 1d0:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 0, 0, 1);
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9f e1       	ldi	r25, 0x1F	; 31
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <onestep+0xac>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <onestep+0xb2>
 1e8:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 1, 0, 0, 1);
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 1f6:	5d c0       	rjmp	.+186    	; 0x2b2 <onestep+0x17c>
	} else if (dir == BACKWARD) {
 1f8:	61 11       	cpse	r22, r1
 1fa:	5b c0       	rjmp	.+182    	; 0x2b2 <onestep+0x17c>
		writeStepper(motor, 0, 0, 0, 1);
 1fc:	01 e0       	ldi	r16, 0x01	; 1
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9f e1       	ldi	r25, 0x1F	; 31
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <onestep+0xd4>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <onestep+0xda>
 210:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 0, 1, 1);
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	8c 2f       	mov	r24, r28
 21a:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9f e1       	ldi	r25, 0x1F	; 31
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <onestep+0xec>
 226:	00 c0       	rjmp	.+0      	; 0x228 <onestep+0xf2>
 228:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 0, 1, 0);
 22a:	00 e0       	ldi	r16, 0x00	; 0
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9f e1       	ldi	r25, 0x1F	; 31
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <onestep+0x106>
 240:	00 c0       	rjmp	.+0      	; 0x242 <onestep+0x10c>
 242:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 1, 1, 0);
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	8c 2f       	mov	r24, r28
 24c:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9f e1       	ldi	r25, 0x1F	; 31
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <onestep+0x11e>
 258:	00 c0       	rjmp	.+0      	; 0x25a <onestep+0x124>
 25a:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 0, 1, 0, 0);
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 268:	8f e3       	ldi	r24, 0x3F	; 63
 26a:	9f e1       	ldi	r25, 0x1F	; 31
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <onestep+0x136>
 270:	00 c0       	rjmp	.+0      	; 0x272 <onestep+0x13c>
 272:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 1, 1, 0, 0);
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	8c 2f       	mov	r24, r28
 27c:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	9f e1       	ldi	r25, 0x1F	; 31
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <onestep+0x14e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <onestep+0x154>
 28a:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 1, 0, 0, 0);
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	8c 2f       	mov	r24, r28
 294:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9f e1       	ldi	r25, 0x1F	; 31
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <onestep+0x166>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <onestep+0x16c>
 2a2:	00 00       	nop
		_delay_ms(STEPPER_SPEED);
		writeStepper(motor, 1, 0, 0, 1);
 2a4:	01 e0       	ldi	r16, 0x01	; 1
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	8c 2f       	mov	r24, r28
 2ae:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
	}
}
 2b2:	cf 91       	pop	r28
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <powerDownDriveTrain>:

void powerDownDriveTrain() {
 2b8:	0f 93       	push	r16
	writeStepper(L_STEPPER, 0, 0, 0, 0);
 2ba:	00 e0       	ldi	r16, 0x00	; 0
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
	writeStepper(R_STEPPER, 0, 0, 0, 0);
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 6a 00 	call	0xd4	; 0xd4 <writeStepper>
}
 2d4:	0f 91       	pop	r16
 2d6:	08 95       	ret

000002d8 <rotateCW>:

void rotateCW(uint16_t angle) {
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8c 01       	movw	r16, r24
	for (int i = 0; i < angle; i++) {
 2e2:	c0 e0       	ldi	r28, 0x00	; 0
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <rotateCW+0x22>
		onestep(L_STEPPER, FORWARD);
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 9b 00 	call	0x136	; 0x136 <onestep>
		onestep(R_STEPPER, BACKWARD);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 9b 00 	call	0x136	; 0x136 <onestep>
	writeStepper(L_STEPPER, 0, 0, 0, 0);
	writeStepper(R_STEPPER, 0, 0, 0, 0);
}

void rotateCW(uint16_t angle) {
	for (int i = 0; i < angle; i++) {
 2f8:	21 96       	adiw	r28, 0x01	; 1
 2fa:	c0 17       	cp	r28, r16
 2fc:	d1 07       	cpc	r29, r17
 2fe:	a0 f3       	brcs	.-24     	; 0x2e8 <rotateCW+0x10>
		onestep(L_STEPPER, FORWARD);
		onestep(R_STEPPER, BACKWARD);
	}
}
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	08 95       	ret

0000030a <rotateCCW>:

void rotateCCW(uint16_t angle) {
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	8c 01       	movw	r16, r24
	for (int i = 0; i < angle; i++) {
 314:	c0 e0       	ldi	r28, 0x00	; 0
 316:	d0 e0       	ldi	r29, 0x00	; 0
 318:	09 c0       	rjmp	.+18     	; 0x32c <rotateCCW+0x22>
		onestep(L_STEPPER, BACKWARD);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 9b 00 	call	0x136	; 0x136 <onestep>
		onestep(R_STEPPER, FORWARD);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 9b 00 	call	0x136	; 0x136 <onestep>
		onestep(R_STEPPER, BACKWARD);
	}
}

void rotateCCW(uint16_t angle) {
	for (int i = 0; i < angle; i++) {
 32a:	21 96       	adiw	r28, 0x01	; 1
 32c:	c0 17       	cp	r28, r16
 32e:	d1 07       	cpc	r29, r17
 330:	a0 f3       	brcs	.-24     	; 0x31a <rotateCCW+0x10>
		onestep(L_STEPPER, BACKWARD);
		onestep(R_STEPPER, FORWARD);
	}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
